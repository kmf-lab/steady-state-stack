# Stage 1: Build Stage
FROM alpine:3.18 AS builder

ENV AERON_VERSION=1.39.0
ENV AERON_SRC=/opt/aeron
ENV BUILD_DIR=/build

# Set service user variables
ARG SERVICE_USER=aeronmd
ENV SERVICE_USER=${SERVICE_USER}
ARG SERVICE_UID=1001
ARG SERVICE_GID=1001

# Add a group and user with specific UID and GID
RUN apk add --no-cache shadow
RUN addgroup -g "$SERVICE_GID" "$SERVICE_USER" && \
    adduser -u "$SERVICE_UID" -G "$SERVICE_USER" -s /sbin/nologin -D "$SERVICE_USER"

# Create and set permissions for shared memory directory
#RUN mkdir -p /dev/shm/aeron-root && \
#    chown -R "$SERVICE_USER:$SERVICE_USER" /dev/shm/aeron-root && \
#    chmod -R 2770 /dev/shm/aeron-root

# Install build-time dependencies, including kernel headers
RUN apk add --no-cache \
    git \
    cmake \
    make \
    gcc \
    g++ \
    musl-dev \
    linux-headers \
    libuuid \
    libbsd \
    zlib-dev \
    openjdk11 \
    python3 \
    file \
    && mkdir -p $BUILD_DIR

# Clone and build Aeron
RUN git clone --depth 1 --branch $AERON_VERSION https://github.com/real-logic/aeron.git $AERON_SRC

WORKDIR $AERON_SRC
RUN cmake -S . -B $BUILD_DIR -DCMAKE_BUILD_TYPE=Release -DAERON_ENABLE_JAVA=OFF && \
    cmake --build $BUILD_DIR --target aeronmd && \
    # Strip binaries to minimize size
    strip $BUILD_DIR/binaries/aeronmd

# Stage 2: Runtime Image
FROM alpine:3.18

# Copy aeronmd and its required shared libraries
COPY --from=builder /build /build

# Install runtime dependencies
RUN apk add --no-cache \
    musl \
    libuuid \
    libbsd \
    zlib

# Switch to the service user
#USER aeronmd

# Use aeronmd as the default command
CMD ["sh"]

#  docker build -t aeron-alpine -f Dockerfile.aeronmd_alpine .
#  docker run --rm -it --network=host aeron-alpine /build/binaries/aeronmd
