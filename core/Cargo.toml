[package]
name = "steady_state"   # rename from sss
version = "0.0.16"
documentation = "https://docs.rs/steady_state/0.0.16/steady_state/"
               #"https://docs.rs/crate/steady_state/0.0.16"  #debugging
edition = "2021"
description = "Framework for building long runnnig low latency actor based services on Linux. Provides visual telemetry to watch data flows between actors. Uses earlang style supervisors to defend against panics and uses non blocking async ringbuffers for inter actor communication."
license = "MIT"
#build = "build.rs" # assumes we have gzip and base64 installed, the base64 crate is very broken and must not be used.
include = ["templates/**"]

repository = "https://github.com/kmf-lab/steady-state-stack"

# Exclude specific files and directories
exclude = ["**/*.txt", "**/*.sh", "notes/", "temp/"]

[lib]
name = "steady_state"
#path = "src/lib.rs"


# cargo build --release --features telemetry_history,telemetry_server_builtin
[profile.release]
opt-level = 'z' # optimize for size
lto = true # link time optimization
codegen-units = 1 # only one codegen unit to reduce binary size
panic = 'abort' # no unwinding
strip = 'symbols' # strip symbols

[lints.rust]
unsafe_code = "forbid"

[lints.clippy]
enum_glob_use = "deny" # forbid use of enum glob imports
unwrap_used = "deny" # forbid use of unwrap

[features]
default = ["proactor_nuclei", "telemetry_server_builtin", "prometheus_metrics"]
# Use the nuclei async runtime (proactor_? exclusive one or the other) (default)
proactor_nuclei = ["nuclei/async-exec", "nuclei/iouring"]
# Use the tokio async runtime (proactor_? exclusive one or the other)
proactor_tokio = ["nuclei/tokio", "nuclei/iouring"]
# provide prometheus compatible pullable metrics
prometheus_metrics = [] # (default)
# default telemetry_server_bultin is used for telemetry
# This includes the entire telemetry server site in the binary. It will works
# even offline without intenet. This is the default because it is the most reliable.
telemetry_server_builtin = [] # (telemetry_server_? exclusive one or the other) (default)
# only use telemetry_server_cdn if
# 1. you really need to make the build smaller
# 2. where you run your app the browser user will have internet access
telemetry_server_cdn = [] # (telemetry_server_? exclusive one or the other)

# records history files usefull for replay of the telemetry offline after the fact
telemetry_history = []
# no need to enable unless you want to see the performance of the telemetry server
telemetry_on_telemetry = []


[package.metadata.docs.rs]
features = []
no-default-features = true
# Ensure 'telemetry_server_cdn' or 'telemetry_server_builtin' is not listed here since docs.rs does not support it
cargo-args = ["-Zunstable-options", "-Zrustdoc-scrape-examples"]


[dependencies]
nuclei           = { version = "0.4.4", optional = true } # foundational proactive runtime
ringbuf          = "0.4.1"  # foundational bounded message passing
async-ringbuf    = "0.2.1"  # foundational bounded message passing
log              = "0.4.21"  # common logging traits
                  # great logger but I would like to see a new crate using
                  # nuclei with log to provide a more async friendly logger
flexi_logger     = "0.28.1"  # default flexable logging implementation
futures-timer    = "3.0.3"   # for async Delay::new(check_rate).await used places where we poll
hdrhistogram     = "7.5.4"  # for latency histograms
bytes            = { version = "1.6.0", features = [] }
lazy_static      = "1.4"
uuid             = { version = "1.8.0", features = ["v4"] }
num-traits       = "0.2.19" # for num::Zero and other generic math traits
itoa             = "1.0.11"
time             = { version = "0.3.36", features = ["macros","formatting", "parsing"] }
dirs             = "5.0.1"
colored          = "2.1.0"

#kanagawa         = "0.1.3"  # Future replacement for async http server
tide             = "0.17.0-beta.1" # for http server

structopt        = "0.3.26"  # CLI parse for type safe arguments
structopt-derive = "0.4.18"

# NOTE: more thought here about which is the best
futures          = "0.3.30"  # for Select! Barrier etc and lock::Mutex
futures-util     = "0.3.30"
parking_lot      = "0.12.2"# TODO: review our lock usage and possible use of parking_lot

# still in progess, this is for distributed instances across nodes
#stun-rs          = "0.1.8"# TODO: add very soon, test on boxes with public ip addresses
#rustdds          = "0.9.0" # 0.9.0 is broken use to use of io-extras v0.18.1
#Test servers:   "stun.l.google.com:19302" and "stun.ekiga.net:3478"
  #        https://ourcodeworld.com/articles/read/1536/list-of-free-functional-public-stun-servers-2021

#itertools        = "0.12.1"  # helpful smart iter methods
#rayon = "1.10.0"
#rstest = "0.5.2"       # for unit testing

#############################################
## for SQRL will integrate later and use tide # should be in a new project
#ring   = "0.16.20" # for sha
#qrcode = "0.13.0"  # for qr code generation
#rustls = "0.20.0" # for https
#diesel = { version = "1.4.7", features = ["postgres"] }
###############################################

#minimal-lexical = "0.5.0" # for fast number parsing

#others
#rand             = "0.8.4" # for random number generation
#regex            = "1.5.4" # for regex
#dashmap          = "5.5.3"
#signal-hook      = "0.3.17"

############################################
# put this into a new project? theses probably do not belong here
#isahc        = "1.7.2" # for http client using libcurl
#k8s-openapi  = { version = "0.21.1", features = ["latest"] }
#kube-core    = "0.89.0"
#kube-derive  = "0.89.0"
#k8s-metrics  = "0.15.0"
#serde        ="1.0.197" # for serialization and deserialization
#serde_derive = "1.0.64" # for serialization and deserialization
#serde_json   = "1.0.64" # for serialization and deserialization
###################################################


# for future consideration
# turbine = { git = "https://github.com/polyfractal/Turbine", branch = "main" }
# disruptor        = "0.2.0"

[build-dependencies]
tempfile         = "3.10.1"
isahc            = "1.7.2"
askama           = "0.12.1"




[dev-dependencies]
async-std        = {  version = "1.12.0", features = ["attributes"] }  # for async unit testing only,
rand_distr       = "0.5.0-alpha.1" # for random number generation
#testcontainers   = "0.15.0" # for integration testing, DO NOT upgrade to 0.16.0 since Tokio is not supported here
rand             = "0.9.0-alpha.1" # for random number generation

[target.armv7-unknown-linux-gnueabihf]
linker = "arm-linux-gnueabihf-gcc"



#
# Future work: to test if the code compiles for no_std use this command:
#  cargo build --target thumbv6m-none-eabi
#