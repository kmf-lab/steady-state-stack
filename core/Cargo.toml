[package]
name = "steady_state"   # rename from sss
version = "0.2.2"
documentation = "https://docs.rs/steady_state/0.0.21/steady_state/"
authors = ["Nathan Tippy <nathan@tippy.name>"]
edition = "2024"
description = "Framework for building long running low latency actor based services on Linux. Provides visual telemetry to watch data flows between actors. Uses Erlang style supervisors to defend against panics and uses non blocking async ringbuffers for inter actor communication."
license = "MIT"
build = "build.rs" # assumes we have gzip and base64 installed, the base64 crate is very broken and must not be used.
repository = "https://github.com/kmf-lab/steady-state-stack"
include = ["templates/**", "src/**", "Cargo.toml", "README.md", "build.rs", "static/telemetry/**", "**/*.gz.b64"]
exclude = ["**/*.txt", "**/*.sh", "notes/", "temp/", "target/**"]



[lib]
name = "steady_state"
path = "src/lib.rs"

# cargo build --release --features telemetry_history,telemetry_server_builtin

[profile.release]
opt-level = 'z' # optimize for size
lto = true # link time optimization
codegen-units = 1 # only one codegen unit to reduce binary size
strip = 'symbols' # strip symbols

#panic = 'abort' # no unwinding

[lints.clippy]
enum_glob_use = "deny" # forbid use of enum glob imports
unwrap_used = "deny" # forbid use of unwrap


[features]
default = ["exec_async_std", "telemetry_server_builtin", "prometheus_metrics", "core_display", "core_affinity"]
    # Use the nuclei async runtime (proactor_? exclusive one or the other) (default)
proactor_nuclei = ["nuclei/async-exec", "nuclei/iouring"]
# Use the tokio async runtime (proactor_? exclusive one or the other)
proactor_tokio = ["nuclei/tokio", "nuclei/iouring"]

exec_async_std = ["async-std"]  # works

# provide prometheus compatible pullable metrics
prometheus_metrics = [] # (default)
# default telemetry_server_bultin is used for telemetry
# This includes the entire telemetry server site in the binary. It will works
# even offline without intenet. This is the default because it is the most reliable.
telemetry_server_builtin = [] # (telemetry_server_? exclusive one or the other) (default)
# only use telemetry_server_cdn if
# 1. you really need to make the build smaller
# 2. where you run your app the browser user will have internet access
telemetry_server_cdn = [] # (telemetry_server_? exclusive one or the other)

# records history files usefull for replay of the telemetry offline after the fact
telemetry_history = []

core_affinity = ["libc", "winapi"]
core_display = ["libc", "winapi"]


# when testing new projects, you may want to turn this on so you only get the first
# failure and then a quick exit.
disable_actor_restart_on_failure = []

# no need to enable unless you want to see the performance of the telemetry server
telemetry_on_telemetry = []


#ros2           = ["datachannel", "r2r"]
#zeromq-support = ["zmq"]
#webrtc         = ["dachannel"]

[package.metadata.docs.rs]
features = ["exec_async_std"]
no-default-features = true
# Ensure 'telemetry_server_cdn' or 'telemetry_server_builtin' or 'prometheus_metrics' are not listed here since docs.rs does not support it
cargo-args = ["-Zunstable-options", "-Zrustdoc-scrape-examples"]

[dependencies]
nuclei           = { version = "0.4.4", optional = true } # foundational proactive runtime
async-std        = { version = "1.13.1", optional = true, features = ["default"]}
ringbuf          = "0.4.8"  # foundational bounded message passing
async-ringbuf    = "0.3.4"  # foundational bounded message passing
log              = "0.4.27"  # common logging traits
flexi_logger     = { version="0.31.1", features=["colors", "async"] }  # default flexable logging implementation
futures-timer    = "3.0.3"   # for async Delay::new(check_rate).await used places where we poll
hdrhistogram     = "7.5.4"  # for latency histograms
bytes            = { version = "1.9.0", features = [] }
lazy_static      = "1.5.0"
uuid             = { version = "1.16.0", features = ["v4"] }
num-traits       = "0.2.19" # for num::Zero and other generic math traits
itoa             = "1.0.15"
ctrlc            = "3.4.7"
time             = { version = "0.3.41", features = ["macros", "formatting", "parsing"] } # used in dot regardles of what IDE reports
dirs             = "6.0.0"
clap             = { version = "4.5.35", features = ["derive"] }  # Use clap with derive feature
futures          = "0.3.31"  # for Select! Barrier etc and lock::Mutex
futures-util     = "0.3.31"
parking_lot      = "0.12.3"
tempfile         = "3.19.1"

ahash            = "0.8.11" # fastest hash map so far
async-io         = "2.4.0"
async-lock       = "3.4"  # Use the latest version



# HTTP Web solution is built on this stack of crates
#http           = "1.3.1"
#httparse       = "1.10.1"
#futures-rustls = "0.26.0"
#h2 = { version = "0.3", default-features = false }
#quinn          = "0.11.7"
#h3             = "0.0.7"
#################################################

#num_cpus         = "1.16.0"
#smallvec         = "1.13.2"
#pin-project      = "1.1.7"

# buldign in MQTT for IoT and Lambdas, for soon 0.2 release
#mqttrs           = "0.4.1"
# building in encryption for soon 0.2 release, pre testing now.
#hkdf             = "0.13.0-pre.4" # generate common hash for all peer pods
#x25519-dalek     = "2.0.1"              #
#chacha20poly1305 = "0.11.0-pre.2" # for encrypted streams
# fork of aeron-rs with just the fixes we need until they get merged into the mainline
#steady_state_aeron     = { version="0.1.6-kmf1" }
#once_cell = "1.20.2"
# for local testing
aeron = "0.2.0"
winapi = "0.3.9"
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.140"
bincode = "2.0.1"
futures-lite = "2.6.0"
#futures-lite = "2.6.0"
#backtrace = "0.3.74"
#async-trait = "0.1.88"
# steady_state_aeron    = { path = "../../aeron-rs", version="0.1.6-kmf1" }
# Dependencies for Unix-like systems (Linux, macOS, etc.)
[target.'cfg(unix)'.dependencies]
libc = { version = "0.2", optional = true }

# Dependencies for Windows
[target.'cfg(windows)'.dependencies]
winapi = { version = "0.3", optional = true, features = ["winbase", "processthreadsapi"] }


# Release Notes::
# 0.1.0 - one year aniversary (12/04/24) relase single machine
#         75% function test coverage
#      Transparency
#          Built in visual telemetry at 25fps (just open a browser)
#          Prometheus Metrics for channels and actors
#          Graphiz copatible .dot file for new project generation
#          Metrics with Avg, StdDev, and Percentiles
#          Color alert triggers for CPU and Message rates
#      Effeciency
#          High thoughput ringbuffer channels not blocking either end
#          Batch processing for channel messages
#          Work driven async actors without polling
#          Core affinity optimization and NUMA-friendly channels
#          Thread teaming to map actor graphs to available cores
#      Reliability
#          Erlang style panic recovery with durable state
#          Non blocking async ringbuffers
#          Clean deterministic orderly shutdown
#          Peek and 'Take after process' for lossless messaging
#          Unit testing for both Actors and Graphs
# 0.1.1 -  Januay 2025
#          Send trait NO LONGER required for actors !! Use more of your favorite crates.
#
# 0.1.2 -  02/02/25
#          Removed confusing macro now use  context.into_monitor(
#          Updated to new Clap with integrated declaritive type checking
#          More unified methods for both streams and channels
#          Upgrade to edition = "2024"
#
# 0.1.3 -  04/01/25
#          Added async-std for windows support
#          Added aeron power script for windows
#          Added new Test Enums and Macros to simplify actors
#
# 0.2.0 - 06/25/25
#          Distributed actors via aqueducts
#          Aeron for routing_service
#          Streams - double buffered and zero copy
#          Better method names
#          Tutorial Lessons
#          DLQ showstopper detection
#          Testing framework for single actors
#          Testing framework for entire application graph

#  Future Roadmap
#          Add MQTT for routing_service
#          Add NATS for routing_service
#          Add ROS2 for routing_service
#          New module for http 1,2 and 3
#          History/Log recording for relplay and review
#          Optimizing Thread Scheduler
#          IOUring
#          bps on telemetry





[dependencies.libc]
version = "0.2.161"
optional = true


#############################################
## for SQRL will integrate later and should be in a new project
#ring   = "0.16.20" # for sha
#qrcode = "0.13.0"  # for qr code generation
#rustls = "0.20.0" # for https
#diesel = { version = "1.4.7", features = ["postgres"] }
###############################################

############################################
# put this into a new project for building kube operators
#isahc        = "1.7.2" # for http client using libcurl
#k8s-openapi  = { version = "0.21.1", features = ["latest"] }
#kube-core    = "0.89.0"
#kube-derive  = "0.89.0"
#k8s-metrics  = "0.15.0"
#serde        = "1.0.197" # for serialization and deserialization
#serde_derive = "1.0.64" # for serialization and deserialization
#serde_json   = "1.0.64" # for serialization and deserialization
###################################################


#minimal-lexical = "0.5.0" # for fast number parsing
#others
#rand             = "0.8.4" # for random number generation
#regex            = "1.5.4" # for regex
#dashmap          = "5.5.3"
#signal-hook      = "0.3.17"

# for future consideration
# turbine = { git = "https://github.com/polyfractal/Turbine", branch = "main" }
# disruptor        = "0.2.0"

[build-dependencies]
isahc            = "1.7.2"
askama           = "0.14.0"
tempfile         = "3.13.0"  # for testing
flate2           = "1.1.0"
regex            = "1.11.1" # future testing
daachorse        = "1.0.0" # future testing
xz2              = "0.1.7" # future testing

[[example]]
name = "simple_widgets"
path = "examples/simple_widgets/main.rs"

[[example]]
name = "large_scale"
path = "examples/large_scale/main.rs"

[[example]]
name = "high_performance"
path = "examples/high_performance/main.rs"

[[example]]
name = "high_durability"
path = "examples/high_durability/main.rs"


[dev-dependencies]
async-std        = {  version = "1.13.0", features = ["attributes"] }  # for async unit testing only,
rand_distr       = "0.5.1" # for random number generation
rand             = "0.9.1" # for random number generation
isahc            = "1.7.2"
#testcontainers   = "0.15.0" # for integration testing, DO NOT upgrade to 0.16.0 since Tokio is not supported here
