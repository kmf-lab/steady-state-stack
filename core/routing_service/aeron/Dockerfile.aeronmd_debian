# Stage 1: Build Stage
FROM debian:bullseye-slim AS builder

ENV AERON_VERSION=1.48.0
                # 1.46.7
ENV AERON_SRC=/opt/aeron
ENV BUILD_DIR=/build

# Install only build-time dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    cmake \
    make \
    gcc \
    g++ \
    libc-dev \
    libuuid1 \
    libbsd0 \
    uuid-dev \
    libbsd-dev \
    zlib1g-dev \
    openjdk-11-jdk-headless \
    python3 \
    python3-dev \
    file \
    wget \
    openssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Upgrade CMake to the latest version (manual download and install)
RUN wget -qO- https://github.com/Kitware/CMake/releases/download/v3.30.3/cmake-3.27.6-linux-x86_64.tar.gz | tar --strip-components=1 -xz -C /usr/local

# Clone the Aeron source repository
RUN git clone --depth 1 --branch $AERON_VERSION https://github.com/real-logic/aeron.git $AERON_SRC

# Build aeronmd
WORKDIR $AERON_SRC


RUN mkdir -p $BUILD_DIR && \
    cmake -S . -B $BUILD_DIR -DCMAKE_BUILD_TYPE=Release -DAERON_ENABLE_JAVA=OFF && \
    cmake --build $BUILD_DIR --target aeronmd && \
    strip $BUILD_DIR/binaries/aeronmd

# for deep debug use this block instead of the previous
#RUN mkdir -p $BUILD_DIR && \
#    cmake -S . -B $BUILD_DIR -DCMAKE_BUILD_TYPE=Debug -DAERON_ENABLE_JAVA=OFF && \
#    cmake --build $BUILD_DIR --target aeronmd


# Stage 2: Runtime Image
FROM debian:bullseye-slim

# Copy aeronmd and its required shared libraries
COPY --from=builder /build /build

# Update library cache
RUN ldconfig

# Final image size optimization: Remove unnecessary components
RUN apt-get update && apt-get install -y --no-install-recommends \
    libc6 \
    libuuid1 \
    libbsd0 \
    zlib1g \
    && rm -rf /var/lib/apt/lists/*

ENV AERON_DIR=/dev/shm/aeron-default
ENV AERON_PRINT_CONFIGURATION=true
ENV AERON_THREADING_MODE=DEDICATED
ENV AERON_MEMORY_MAPPED_FILE_MODE=PERFORMANCE
ENV AERON_MEDIA_DRIVER_THREAD_PRIORITY=10
ENV AERON_TERM_BUFFER_PRE_ZERO=0


actor ["sh"]

#  docker build -t aeron-debian -f Dockerfile.aeronmd_debian .
#  docker run --rm -it --network=host aeron-debian /build/binaries/aeronmd
#  docker run --rm --ipc=host --network=host --shm-size=2g --cap-add=SYS_ADMIN -u $SERVICE_USER 2>/dev/null):$(id -g $SERVICE_USER 2>/dev/null) --name aeronmd aeron-debian ls /dev/shm -hal
