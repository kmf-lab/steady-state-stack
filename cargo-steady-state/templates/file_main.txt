mod args;
#[allow(unused_imports)]
use log::*;
use crate::args::Args;
use std::time::Duration;
use steady_state::*;

mod actor {
    {% for mod in actor_mods %}
        pub mod {{mod}};{% endfor %}
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let opt = Args::parse();

    let service_executable_name = "{{project_name}}";
    let service_user = "{{project_name}}_user";
    let systemd_command = SystemdBuilder::process_systemd_commands(  opt.systemd_action()
                                                   , service_executable_name
                                                   , service_user);

    if !systemd_command {
        info!("Starting up");
        let mut graph = build_graph(GraphBuilder::default().build(opt.clone()) );
        graph.loglevel(opt.loglevel);
        graph.start();

        {  //remove this block to run forever.
           std::thread::sleep(Duration::from_secs(60));
           graph.request_shutdown(); //actors can also call stop as desired on the context or monitor
        }

        graph.block_until_stopped(Duration::from_secs(2))
    } else {
        Ok(())
    }
}

fn build_graph(mut graph: Graph) -> Graph {

    //this common root of the channel builder allows for common config of all channels
    let base_channel_builder = graph.channel_builder()
        .with_type()
        .with_line_expansion(1.0f32);

    //this common root of the actor builder allows for common config of all actors
    let base_actor_builder = graph.actor_builder()
        .with_mcpu_percentile(Percentile::p80())
        .with_load_percentile(Percentile::p80());

    //build channels
    {% for channel in channels %}
    let ({{channel[0].tx_prefix_name(channel)}}_{{channel[0].name}}_tx, {{channel[0].rx_prefix_name(channel)}}_{{channel[0].name}}_rx) = base_channel_builder
        .with_capacity({{channel[0].capacity}}){% if channel.len()>1 %}
        .build_channel_bundle::<_,{{channel.len()}}>();{% else %}
        .build();{% endif %}
    {% endfor %}
    //build actors
    {% for actor in actors %}
    {
     let state = new_state();
    {% for channel in actor.rx_channels %}{% if channel[0].has_bundle_index() -%}{%- if channel[0].needs_rx_single_clone() -%}
     let {{channel[0].rx_prefix_name(channel)}}_{{channel[0].name}}_rx = {{channel[0].rx_prefix_distributed_name()}}_{{channel[0].name}}_rx[{{channel[0].bundle_index()}}].clone();{% endif %}{%- else -%}{% if channel[0].restructured_bundle_rx(channel) %}
     let {{actor.formal_name()|lowercase}}_{{channel[0].name}}_rx = steady_rx_bundle([{%- for ch in channel -%}{{ch.rx_prefix_distributed_name()}}_{{ch.name}}_rx{% if ch.rebundle_index()>=0 %}[{{ch.rebundle_index()}}].clone(){% endif -%}
                                                                                       {%- if loop.last -%}{%- else -%},{%- endif -%}{%- endfor -%}]);
       {% endif -%}{%- endif %}{% endfor -%}{%- for channel in actor.tx_channels %}{% if channel[0].has_bundle_index() %}
      {%- if channel[0].needs_tx_single_clone() %}
     let {{channel[0].tx_prefix_name(channel)}}_{{channel[0].name}}_tx = {{channel[0].tx_prefix_distributed_name()}}_{{channel[0].name}}_tx[{{channel[0].bundle_index()}}].clone();
      {% endif %}{% else -%}{%- if channel[0].restructured_bundle() %}
     let {{actor.formal_name()|lowercase}}_{{channel[0].name}}_tx = steady_tx_bundle([{%- for ch in channel -%}{{ch.tx_prefix_distributed_name()}}_{{ch.name}}_tx{% if ch.rebundle_index()>=0 %}[{{ch.rebundle_index()}}].clone()
     {% endif %}{%- if loop.last -%}{%- else -%},{%- endif -%}{%- endfor -%}]);
       {%- endif -%}
    {%- endif %}{% endfor %}
     {% if actor.display_suffix.is_some() -%}
     base_actor_builder.with_name_and_suffix("{{actor.display_name}}",{{actor.display_suffix.expect("")}})
     {%- else %}base_actor_builder.with_name("{{actor.display_name}}"){% endif %}
                 .build( move |context| actor::{{actor.mod_name}}::run(context
                                          {%- for channel in actor.rx_channels %}
                                            , {% if channel[0].restructured_bundle() %}{{actor.formal_name()|lowercase}}{% else %}{{channel[0].rx_prefix_name(channel)}}{% endif %}_{{channel[0].name}}_rx.clone(){% endfor -%}
                                          {%- for channel in actor.tx_channels %}
                                            , {% if channel[0].restructured_bundle() %}{{actor.formal_name()|lowercase}}{% else %}{{channel[0].tx_prefix_name(channel)}}{% endif %}_{{channel[0].name}}_tx.clone(){% endfor -%}
                                         , state.clone() )
                  , &mut Threading::Spawn );
    }{% endfor %}
    graph
}
#[cfg(test)]
mod graph_tests {
    use steady_state::*;
    use std::time::Duration;
    use crate::args::Args;
    use crate::build_graph;
    use std::ops::DerefMut;
    use futures_timer::Delay;

    #[test]
    fn test_graph() -> Result<(), Box<dyn std::error::Error>> {

            let test_ops = Args {
                loglevel: LogLevel::Debug,
                systemd_install: false,
                systemd_uninstall: false,
            };
            let mut graph = build_graph( GraphBuilder::for_testing().build(test_ops.clone()) );
            graph.start();
            let stage_manager = graph.stage_manager();

             //NOTE: to ensure the node_call is for the correct channel for a given actor unique types for each channel are required

            {% for actor in actors -%}
                {%- if actor.is_on_graph_edge() -%}
                  {% for channel in actor.rx_channels %}
                     {{note_for_the_user}}  Adjust as needed to inject test values into the graph
                     // stage_manager.actor_perform("{{actor.display_name}}", StateWaitFor::Message({{channel[0].message_type}}::default(),Duration::from_sec(1)) )?;
                  {%- endfor %}
                {% endif -%}
            {%- endfor %}


             {% for actor in actors -%}
                {%- if actor.is_on_graph_edge() -%}

                  {% for channel in actor.tx_channels %}
                     {{note_for_the_user}}  Adjust as needed to test the values produced by the graph
                     // stage_manager.actor_perform("{{actor.display_name}}", StageDirection::Echo({{channel[0].message_type}}::default())))?;
                  {%- endfor %}
                {% endif -%}
             {%- endfor %}
            drop(stage_manager); //must drop before we can use graph methods
            graph.request_shutdown();
            //this will return Ok(()) once you have actors shutting down in order
            graph.block_until_stopped(Duration::from_secs(3));
            Ok(()) //hack for now..
    }
}
