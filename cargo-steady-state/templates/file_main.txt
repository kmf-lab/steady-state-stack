mod args;
use structopt::StructOpt;
#[allow(unused_imports)]
use log::*;
use crate::args::Args;
use std::time::Duration;
use steady_state::*;


{{test_only}}


mod actor {
    {% for mod in actor_mods %}
        pub mod {{mod}};
    {% endfor %}
}

fn main() {
    let opt = Args::from_args();
    if let Err(e) = steady_state::init_logging(&opt.loglevel) {
        //do not use logger to report logger could not start
        eprint!("Warning: Logger initialization failed with {:?}. There will be no logging.", e);
    }
    info!("Starting up");

    let mut graph = build_graph(steady_state::GraphBuilder::for_production().build(opt.clone()) );

    graph.start();

    {  //remove this block to run forever.
       std::thread::sleep(Duration::from_secs(60));
       graph.request_stop(); //actors can also call stop as desired on the context or monitor
    }

    graph.block_until_stopped(Duration::from_secs(2));
}

fn build_graph(mut graph: Graph) -> steady_state::Graph {

    //this common root of the channel builder allows for common config of all channels
    let base_channel_builder = graph.channel_builder()
        .with_compute_refresh_window_floor(Duration::from_secs(1),Duration::from_secs(10))
        .with_type()
        .with_line_expansion(1.0f32);
    //this common root of the actor builder allows for common config of all actors
    let base_actor_builder = graph.actor_builder() //with default OneForOne supervisor
        .with_mcpu_percentile(Percentile::p80())
        .with_work_percentile(Percentile::p80())
        .with_compute_refresh_window_floor(Duration::from_secs(1),Duration::from_secs(10));
    //build channels
    {% for channel in channels %}
    let ({{channel[0].tx_prefix_name(channel)}}_{{channel[0].name}}_tx, {{channel[0].rx_prefix_name(channel)}}_{{channel[0].name}}_rx) = base_channel_builder
        .with_capacity({{channel[0].capacity}}){% if channel.len()>1 %}
        .build_as_bundle::<_,{{channel.len()}}>();{% else %}
        .build();{% endif %}
    {% endfor %}
    //build actors
    {% for actor in actors %}
    {
    {%- for channel in actor.rx_channels %}{% if channel[0].has_bundle_index() -%}
      {% if channel[0].needs_rx_single_clone() %}
       let {{channel[0].rx_prefix_name(channel)}}_{{channel[0].name}}_rx = {{channel[0].rx_prefix_distributed_name()}}_{{channel[0].name}}_rx[{{channel[0].bundle_index()}}].clone();
      {% endif %}
    {%- else -%}{% if channel[0].restructured_bundle_rx(channel) %}
       let {{actor.display_name|lowercase}}_{{channel[0].name}}_rx = steady_rx_bundle([{%- for ch in channel -%}{{ch.rx_prefix_distributed_name()}}_{{ch.name}}_rx{% if ch.rebundle_index()>=0 %}[{{ch.rebundle_index()}}].clone(){% endif -%}
                                                                                       {%- if loop.last -%}{%- else -%},{%- endif -%}{%- endfor -%}]);
       {% endif -%}
    {%- endif %}{% endfor -%}

    {%- for channel in actor.tx_channels %}{% if channel[0].has_bundle_index() %}
      {% if channel[0].needs_tx_single_clone() %}
       let {{channel[0].tx_prefix_name(channel)}}_{{channel[0].name}}_tx = {{channel[0].tx_prefix_distributed_name()}}_{{channel[0].name}}_tx[{{channel[0].bundle_index()}}].clone();
      {% endif %}
    {% else -%}{%- if channel[0].restructured_bundle() %}
       let {{actor.display_name|lowercase}}_{{channel[0].name}}_tx = steady_tx_bundle([{%- for ch in channel -%}{{ch.tx_prefix_distributed_name()}}_{{ch.name}}_tx{% if ch.rebundle_index()>=0 %}[{{ch.rebundle_index()}}].clone(){% endif -%}
                                                                                       {%- if loop.last -%}{%- else -%},{%- endif -%}{%- endfor -%}]);
       {% endif -%}

    {%- endif %}{% endfor %}
       base_actor_builder.with_name("{{actor.display_name}}")
                 .build_spawn( move |context| actor::{{actor.mod_name}}::run(context
                                          {%- for channel in actor.rx_channels %}
                                            , {% if channel[0].restructured_bundle() %}{{actor.display_name|lowercase}}{% else %}{{channel[0].rx_prefix_name(channel)}}{% endif %}_{{channel[0].name}}_rx.clone(){% endfor -%}
                                          {%- for channel in actor.tx_channels %}
                                            , {% if channel[0].restructured_bundle() %}{{actor.display_name|lowercase}}{% else %}{{channel[0].tx_prefix_name(channel)}}{% endif %}_{{channel[0].name}}_tx.clone(){% endfor -%}
                                         )
                 );
    }{% endfor %}
    graph
}

#[cfg(test)]
mod graph_tests {
    use async_std::test;
    use steady_state::*;

    #[test]
    async fn test_graph_one() {

            let test_ops = Args {
                loglevel: "debug".to_string(),
                systemd_install: false,
                systemd_uninstall: false,
            };
            let mut graph = build_graph(steady_state::Graph::new_test(test_ops.clone()) );
            graph.start();
            let mut guard = graph.sidechannel_director().await;
            if let Some(plane) = guard.deref_mut() {

              //  write your test here, send messages to edge nodes and get responses
              //  let response = plane.node_call(Box::new(SOME_STRUCT), "SOME_NODE_NAME").await;
              //  if let Some(msg) = response {
              //  }

            }
            drop(guard);
            graph.request_stop();
            graph.block_until_stopped(Duration::from_secs(3));

    }
}
