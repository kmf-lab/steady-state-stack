
#[allow(unused_imports)]
use log::*;
#[allow(unused_imports)]
use std::time::Duration;
use steady_state::*;
use crate::Args;
use std::error::Error;
{% for u in message_types_to_use -%}
{{u}};
{% endfor %}
{% for st in message_types_to_define -%}
{{st}} {
   _dummy: u8 {{note_for_the_user}} remove dummy and put your channel message fields here
}
{% endfor %}
//if no internal state is required (recommended) feel free to remove this.
#[derive(Default)]
pub(crate) struct {{ display_name|capitalize }}InternalState {
     {%- for channel in rx_channels -%}{% if channel[0].should_build_read_buffer() %}
            {{channel[0].name}}_buffer: [{{channel[0].message_type}}; {{channel[0].batch_read}}],
        {% endif %}{% endfor %}
     {%- for channel in tx_channels -%}{% if channel[0].should_build_write_buffer() %}
            {{channel[0].name}}_buffer: [{{channel[0].message_type}}; {{channel[0].batch_write}}],
{% endif %}{% endfor %}
}

pub async fn run{%- if has_bundles -%}<{% endif -%}
    {%- for channel in rx_channels -%}
        {%- if channel.len()>1 %}const {{channel[0].name|uppercase}}_RX_GIRTH:usize,{% endif -%}
    {%- endfor -%}
    {%- for channel in tx_channels -%}
        {%- if channel.len()>1 %}const {{channel[0].name|uppercase}}_TX_GIRTH:usize,{% endif -%}
    {%- endfor -%}
  {%- if has_bundles -%}>{% endif -%}
  (context: SteadyContext
    {%- for channel in rx_channels %}
        ,{{channel[0].name}}_rx: {% if channel.len()>1 %}SteadyRxBundle<{{channel[0].message_type}}, {{channel[0].name|uppercase}}_RX_GIRTH>
                                  {%- else %}SteadyRx<{{channel[0].message_type}}>{% endif %}{%- endfor %}
    {%- for channel in tx_channels %}
        ,{{channel[0].name}}_tx: {% if channel.len()>1 %}SteadyTxBundle<{{channel[0].message_type}}, {{channel[0].name|uppercase}}_TX_GIRTH>
                                  {%- else %}SteadyTx<{{channel[0].message_type}}>{% endif %}{%- endfor -%}
   , state: SteadyState<{{ display_name|capitalize }}InternalState>
    ) -> Result<(),Box<dyn Error>> {

  // if needed CLI Args can be pulled into state from _cli_args
  let _cli_args = context.args::<Args>();
  // monitor consumes context and ensures all the traffic on the chosen channels is monitored
  // monitor and context both implement SteadyCommander. SteadyContext is used to avoid monitoring
  let cmd =  context.into_monitor([{%- for def in rx_monitor_defs -%}
                        &{{def}}{%- if loop.last %}{% else -%},{%- endif %}{% endfor %}],[{% for def in tx_monitor_defs -%}
                        &{{def}}{%- if loop.last %}{% else -%},{%- endif %}{% endfor %}]);
  {% if is_on_graph_edge %}
  if cfg!(not(test)) { {% endif %}
     internal_behavior(cmd {%- for channel in rx_channels %},{{channel[0].name}}_rx{%- endfor -%}{%- for channel in tx_channels %}, {{channel[0].name}}_tx{%- endfor -%}, state).await
  {% if is_on_graph_edge %}
  } else {
     cmd.simulated_behavior(vec!(
           {%- for channel in tx_channels -%}
                 &TestEcho({{channel[0].name}}_tx){%- if loop.last %}{% else -%},{%- endif %}
             {%- endfor -%}
             {%- if !rx_channels.is_empty() && !tx_channels.is_empty() -%},{%- endif %}
             {%- for channel in rx_channels -%}
                 &TestEquals({{channel[0].name}}_rx){%- if loop.last %}{% else -%},{%- endif %}
             {%- endfor -%}
               )).await
  } {% endif %}
}

async fn internal_behavior<C: SteadyCommander{%- if has_bundles -%},{% endif -%}
    {%- for channel in rx_channels -%}
        {%- if channel.len()>1 %}const {{channel[0].name|uppercase}}_RX_GIRTH:usize
,{% endif -%}{%- endfor -%}
    {%- for channel in tx_channels -%}
        {%- if channel.len()>1 %}const {{channel[0].name|uppercase}}_TX_GIRTH:usize
,{% endif -%}
    {%- endfor -%}{%- if has_bundles -%}{% endif -%}>(mut cmd: C{%- for channel in rx_channels %},{{channel[0].name}}_rx: {% if channel.len()>1 %}SteadyRxBundle<{{channel[0].message_type}}
, {{channel[0].name|uppercase}}_RX_GIRTH>{%- else %}SteadyRx<{{channel[0].message_type}}>{% endif %}{%- endfor -%}
    {%- for channel in tx_channels -%},{{channel[0].name}}_tx: {% if channel.len()>1 %}SteadyTxBundle<{{channel[0].message_type}}
, {{channel[0].name|uppercase}}_TX_GIRTH>{%- else %}SteadyTx<{{channel[0].message_type}}>{% endif %}{%- endfor -%}
, state: SteadyState<{{ display_name|capitalize }}InternalState>
 ) -> Result<(),Box<dyn Error>> {

    let mut state_guard = state.lock( || {{ display_name|capitalize }}InternalState::default()).await;
    if let Some(mut state) = state_guard.as_mut() {

   //every read and write channel must be locked for this instance use, this is outside before the loop
 {%- for channel in rx_channels %}
   let mut {{channel[0].name}}_rx = {{channel[0].name}}_rx.lock().await;{% endfor %}{% for channel in tx_channels %}
   let mut {{channel[0].name}}_tx = {{channel[0].name}}_tx.lock().await;{% endfor %}

   //this is the main loop of the actor, will run until shutdown is requested.
   //the closure is called upon shutdown to determine if we need to postpone the shutdown
   while cmd.is_running(&mut || {%- for channel in rx_channels -%}
        {{channel[0].name}}_rx.is_closed_and_empty()
        {%- if loop.last %}{% else %} && {% endif -%}{% endfor %}{%- for channel in tx_channels %}
        {%- if loop.first && !rx_channels.is_empty() %} && {% else %}{% endif -%}
        {{channel[0].name}}_tx.mark_closed()
        {%- if loop.last %}{% else %} && {% endif -%}
   {% endfor %}) {

     // our loop avoids spinning by using await here on multiple criteria. clean is false if await
     // returned early due to a shutdown request or closed channel.
     {{full_driver_block}}

 {%- for channel in rx_channels %}
  {% if 1==channel.len() %}
          {{note_for_the_user}} here is an example reading from {{channel[0].name}}_rx
          match cmd.try_take(&mut {{channel[0].name}}_rx) {
              Some(rec) => {
                  trace!("got rec: {:?}", rec);
              }
              None => {
                  if clean {
                     //this could be an error if we expected a value
                  }
              }
          }
  {% else %}
         {{note_for_the_user}} here is an example reading from one of the {{channel[0].name}}_rx bundle of {{channel.len()}}
         match cmd.try_take(&mut {{channel[0].name}}_rx[0]) {
             Some(rec) => {
                 trace!("got rec: {:?}", rec);
             }
             None => {
                 if clean {
                    //this could be an error if we expected a value
                 }
             }
         }
  {% endif -%}
{%- endfor %}
{%- for channel in tx_channels %}
  {% if 1==channel.len() %}
        {{note_for_the_user}} here is an example writing to {{channel[0].name}}_tx
        match cmd.try_send(&mut {{channel[0].name}}_tx, {{channel[0].message_type}}::default() ) {
            SendOutcome::Success => {
            },
            SendOutcome::Blocked(msg) => { //in the above await we should have confirmed space is available
                trace!("error sending: {:?}", msg)
            },
        }
  {% else %}
        {{note_for_the_user}} here is an example writing to one of the {{channel[0].name}}_tx bundle of {{channel.len()}}
        match cmd.try_send(&mut {{channel[0].name}}_tx[0], {{channel[0].message_type}}::default() ) {
            SendOutcome::Success => {
            },
            SendOutcome::Blocked(msg) => { //in the above await we should have confirmed space is available
                trace!("error sending: {:?}", msg)
            },
        }
  {% endif -%}
{%- endfor %}

      }
    }
    Ok(())
}



#[cfg(test)]
pub(crate) mod tests {
    use std::time::Duration;
    use steady_state::*;
    use super::*;

    #[async_std::test]
    pub(crate) async fn test_simple_process() {
       let mut graph = GraphBuilder::for_testing().build(());
       {%- for channel in rx_channels %}
       let (test_{{channel[0].name}}_tx,{{channel[0].name}}_rx) = graph.channel_builder().with_capacity(4).{% if channel.len()>1 %}build_as_bundle::<_, {{channel.len()}}>();{% else %}build();{% endif %}
       {% endfor -%}
       {%- for channel in tx_channels %}
       let ({{channel[0].name}}_tx,test_{{channel[0].name}}_rx) = graph.channel_builder().with_capacity(4).{% if channel.len()>1 %}build_as_bundle::<_, {{channel.len()}}>();{% else %}build();{% endif %}
       {% endfor -%}
       let state = new_state();
       graph.actor_builder()
                    .with_name("UnitTest")
                    .build_spawn( move |context|
                            internal_behavior(context {%- for channel in rx_channels %}, {{channel[0].name}}_rx.clone(){%- endfor -%}{%- for channel in tx_channels %}, {{channel[0].name}}_tx.clone(){%- endfor -%}, state.clone())
                     );

       graph.start(); //startup the graph

        {%- for channel in rx_channels %}
           {%- if 1==channel.len() %}
       {{note_for_the_user}} adjust this vec content to make a valid test
       test_{{channel[0].name}}_tx.testing_send_all(vec![{{channel[0].message_type}}::default()],true).await;
           {%- else %}
       {{note_for_the_user}} adjust this vec content to make a valid test, further this is only one in the bundle
       test_{{channel[0].name}}_tx[0].testing_send_all(vec![{{channel[0].message_type}}::default()],true).await;
           {%- endif %}

        {% endfor %}
       graph.request_stop();
       graph.block_until_stopped(Duration::from_secs(15));

        {%- for channel in tx_channels %}
            {%- if 1==channel.len() %}
       {{note_for_the_user}} confirm values on the output channels
       //    assert_eq!(test_{{channel[0].name}}_rx.testing_avail_units().await, 1); // check expected count
       let results_{{channel[0].name}}_vec = test_{{channel[0].name}}_rx.testing_take().await;
            {%- else %}
       {{note_for_the_user}} confirm values on the output channels, further this is only one in the bundle
       //    assert_eq!(test_{{channel[0].name}}_rx[0].testing_avail_units().await, 1); // check expected count
       let results_{{channel[0].name}}_vec = test_{{channel[0].name}}_rx[0].testing_take().await;
            {%- endif %}
        {% endfor -%}
    }
}