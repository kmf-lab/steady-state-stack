[package]
name = "sss"
version = "0.1.0"
edition = "2021"

[profile.release]
opt-level = 'z' # optimize for size
lto = true # link time optimization
codegen-units = 1 # only one codegen unit to reduce binary size
panic = 'abort' # no unwinding
strip = 'symbols' # strip symbols

[lints.rust]
unsafe_code = "forbid"

[lints.clippy]
enum_glob_use = "deny" # forbid use of enum glob imports
unwrap_used = "deny" # forbid use of unwrap


#
# to test if the code compiles for no_std use this command:
#  cargo build --target thumbv6m-none-eabi
#
[features]
### will add cargo-generate support later
#{{#if telemetry_server}}
"telemetry_server" = []
#{{/if}}
#{{#if telemetry_history}}
"telemetry_history" = []
#{{/if}}

[dependencies]
structopt        = "0.3.26"  # CLI parse for type safe arguments
bastion          = "0.4.5"   # The telemetry framwork with supervisors to recover from panics
ringbuf          = "0.4.0-rc.1"
async-ringbuf    = "0.2.0-rc.4"

log              = "0.4.20"  # common logging traits
flexi_logger     = "0.27.3"  # default flexable logging implementation
futures-timer    = "3.0.2"   # for async Delay::new(check_rate).await used places where we poll
futures          = "0.3.29"  # for Select! Barrier etc and lock::Mutex
itertools        = "0.12.0"  # helpful smart iter methods
async-recursion  = "1.0.5"   # simplify the writing of async recursive functions
structopt-derive = "0.4.18"   # simplify the writing of async recursive functions
time = { version = "0.3.31", features = ["formatting"] }# for time::Instant::now()
uuid = { version = "0.8.2", features = ["v4"] }
#
# we will stay with tide since new async logic will be built soon from rust
# long term stratigy to remain async agnostic and not write http myself.
tide             = "0.17.0-beta.1"
tide-websockets  = "0.4.0"

const_panic = "0.2.8" # for const panic!()

#color-eyre = "0.5.5"   # for better error messages
#rstest = "0.5.2"       # for unit testing

# TODO: SSS supports systemd and SQRL but not yet implmented
#       rapid prototyping is a primary feature of sss

#not in use yet... but this is where I am planning to go for web services
#askama           = "0.12.1" # for compile time templating


## for SQRL will integrate later and use tide
ring   = "0.16.20" # for sha
qrcode = "0.13.0"  # for qr code generation
rustls = "0.20.0" # for https
#diesel = { version = "1.4.7", features = ["postgres"] }


#not in use yet for future code gen
petgraph = "0.6.4"  #   for graph data structures
dot = "0.1.4"       #  for graphviz dot file generation
syn = "2.0.48"  # for building syntax tree for generated projects
quote = "1.0.35"  # for converson of syntax tree to text source files

zip              = "0.5"   # zip compression
xz2              = "0.1.6" # lzma compression


#others
rand             = "0.8.4" # for random number generation
regex            = "1.5.4" # for regex
dashmap          = "5.5.3"
bytes = { version = "1.5.0", features = [] }
num-traits = "0.2.17"
  # for concurrent hashmap
#serde ="0.3.0" # for serialization and deserialization
#serde_derive = "1.0.64" # for serialization and deserialization
#serde_json = "1.0.64" # for serialization and deserialization

# for future consideration
# turbine = { git = "https://github.com/polyfractal/Turbine", branch = "main" }
# disruptor        = "0.2.0"   # does not integreate with bastion, but is a lock free ring buffer

[dev-dependencies]
async-std       = {  version = "1.12.0", features = ["attributes"] }  # for async unit testing only
lazy_static     = "1.4" # for lazy statics in unit tests


